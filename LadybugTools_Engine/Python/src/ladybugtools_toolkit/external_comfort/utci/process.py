import warnings

import numpy as np
import pandas as pd
from ladybug.datacollection import HourlyContinuousCollection
from scipy.interpolate import interp1d, interp2d

from ...ladybug_extension.datacollection import (
    collection_from_series,
    collection_to_series,
)


def met_rate_adjustment(
    utci_collection: HourlyContinuousCollection, met: float
) -> HourlyContinuousCollection:
    """Adjust a UTCI data collection using a target met-rate.

    This method uses the relationshp between UTCI and MET rate described in LINDNER-CENDROWSKA, Katarzyna and BRÖDE, Peter, 2021. The evaluation of biothermal conditions for various forms of climatic therapy based on UTCI adjusted for activity [online]. 2021. IGiPZ PAN. [Accessed 27 October 2022]. Available from: http://rcin.org.pl/igipz/Content/194924/PDF/WA51_229409_r2021-t94-no2_G-Polonica-Linder.pdf.

    +---------------------------------------------------------------+----------------------+
    | Activity                                                      | Metabolic rate (MET) |
    +---------------------------------------------------------------+----------------------+
    | Neutral (resting in sitting or standing position)             | 1.1                  |
    +---------------------------------------------------------------+----------------------+
    | Slow walk (on even path, without load, at 3-4 km·h-1)         | 2.3                  |
    | (default for UTCI calculation)                                |                      |
    +---------------------------------------------------------------+----------------------+
    | Fast walk (on even path, without load, at ~5 km·h-1)          | 3.4                  |
    +---------------------------------------------------------------+----------------------+
    | Marching (on even path, without load, at ~5.5 km·h-1)         | 4.0                  |
    +---------------------------------------------------------------+----------------------+
    | Bicycling (for pleasure, on flat terrain, at < 16 km·h-1)     | 4.0                  |
    +---------------------------------------------------------------+----------------------+
    | Nordic walking (for exercise, on flat terrain, at 5-6 km·h-1) | 4.8                  |
    +---------------------------------------------------------------+----------------------+

    Args:
        utci_collection (HourlyContinuousCollection):
            A UTCI data collection.
        met (float, optional):
            The metabolic rate to apply to this data collection.

    Returns:
        HourlyContinuousCollection:
            An adjusted UTCI data collection.
    """

    if met < 1.1:
        raise ValueError(
            "met_rate must be >= 1.1 (representative of a human body at rest)."
        )
    if met > 4.8:
        raise ValueError(
            "met_rate must be <= 4.8 (representative of a exercise at 5-6km·h-1)."
        )

    # data below extracted from https://doi.org/10.7163/GPol.0199 in the format {MET: [UTCI, ΔUTCI]}
    data = {
        4.8: [
            [-50, 71.81581439393939],
            [-46.47239263803681, 71.5127840909091],
            [-42.94478527607362, 71.36126893939394],
            [-38.95705521472392, 70.14914772727273],
            [-34.96932515337423, 67.421875],
            [-30.521472392638035, 64.69460227272728],
            [-26.993865030674847, 61.66429924242425],
            [-23.006134969325153, 58.33096590909091],
            [-17.944785276073617, 52.87642045454545],
            [-12.576687116564415, 48.63399621212122],
            [-6.441717791411044, 43.63399621212122],
            [-1.380368098159508, 40.300662878787875],
            [4.29447852760736, 35.755208333333336],
            [9.815950920245399, 30.906723484848484],
            [15.490797546012274, 26.512784090909093],
            [23.00613496932516, 20.755208333333336],
            [28.06748466257669, 16.967329545454547],
            [30.98159509202455, 15.452178030303031],
            [35.889570552147234, 12.573390151515156],
            [42.63803680981596, 9.846117424242422],
            [50, 6.967329545454547],
        ],
        4.0: [
            [-50, 46.05823863636364],
            [-47.69938650306749, 47.421875],
            [-45.0920245398773, 48.63399621212122],
            [-43.86503067484662, 50.60369318181819],
            [-40.1840490797546, 51.96732954545455],
            [-36.04294478527608, 51.36126893939394],
            [-33.74233128834356, 50.906723484848484],
            [-30.67484662576687, 49.543087121212125],
            [-27.300613496932513, 47.87642045454545],
            [-24.846625766871163, 46.36126893939394],
            [-23.159509202453986, 44.99763257575758],
            [-20.39877300613497, 42.87642045454545],
            [-16.871165644171782, 39.69460227272728],
            [-14.11042944785276, 37.573390151515156],
            [-11.04294478527607, 35.60369318181819],
            [-7.515337423312886, 34.24005681818182],
            [-3.374233128834355, 32.27035984848485],
            [1.0736196319018418, 29.84611742424243],
            [4.141104294478531, 28.02793560606061],
            [7.055214723926383, 25.45217803030303],
            [9.969325153374236, 23.482481060606062],
            [13.036809815950924, 21.664299242424242],
            [16.41104294478528, 19.543087121212125],
            [19.631901840490798, 17.27035984848485],
            [22.852760736196316, 14.846117424242422],
            [26.22699386503068, 12.724905303030305],
            [29.601226993865026, 11.664299242424242],
            [33.28220858895706, 9.846117424242422],
            [36.65644171779141, 8.785511363636367],
            [39.87730061349693, 8.330965909090907],
            [42.63803680981596, 7.421875],
            [46.012269938650306, 6.664299242424242],
            [50, 5.452178030303031],
        ],
        3.4: [
            [-50, 27.724905303030305],
            [-47.239263803680984, 28.785511363636367],
            [-44.47852760736196, 29.543087121212125],
            [-41.717791411042946, 30.45217803030303],
            [-38.34355828220859, 31.05823863636364],
            [-35.2760736196319, 31.05823863636364],
            [-33.43558282208589, 31.361268939393938],
            [-30.98159509202454, 31.815814393939398],
            [-28.220858895705522, 31.967329545454547],
            [-26.380368098159508, 31.05823863636364],
            [-24.846625766871163, 30.300662878787882],
            [-23.006134969325153, 29.694602272727273],
            [-21.165644171779142, 28.482481060606062],
            [-18.558282208588956, 26.967329545454547],
            [-16.411042944785272, 25.755208333333336],
            [-14.11042944785276, 24.39157196969697],
            [-11.65644171779141, 23.02793560606061],
            [-8.742331288343557, 23.179450757575758],
            [-5.828220858895705, 23.330965909090914],
            [-2.4539877300613497, 22.573390151515156],
            [0.6134969325153392, 21.361268939393938],
            [3.374233128834355, 19.846117424242422],
            [6.74846625766871, 17.876420454545453],
            [9.662576687116562, 16.512784090909093],
            [12.883435582822088, 14.846117424242422],
            [16.104294478527606, 14.088541666666664],
            [19.631901840490798, 11.815814393939398],
            [22.085889570552155, 10.300662878787882],
            [24.84662576687117, 8.785511363636367],
            [28.52760736196319, 8.027935606060609],
            [31.44171779141105, 7.1188446969696955],
            [34.20245398773007, 6.058238636363637],
            [37.269938650306756, 5.755208333333336],
            [40.03067484662577, 5.452178030303031],
            [42.94478527607362, 4.846117424242426],
            [46.012269938650306, 4.088541666666668],
            [50, 3.9370265151515156],
        ],
        2.3: [
            [-50, -0.15151515151515227],
            [50, 0],
        ],
        1.1: [
            [-50, -27.87878787878788],
            [-48.15950920245399, -26.96969696969697],
            [-45.858895705521476, -26.21212121212121],
            [-44.6319018404908, -24.09090909090909],
            [-42.484662576687114, -21.96969696969697],
            [-39.57055214723926, -19.848484848484848],
            [-36.04294478527608, -19.242424242424242],
            [-32.20858895705521, -20],
            [-29.447852760736197, -21.363636363636363],
            [-25.460122699386503, -23.03030303030303],
            [-22.54601226993865, -24.848484848484848],
            [-19.32515337423313, -26.666666666666668],
            [-16.257668711656443, -28.484848484848484],
            [-13.34355828220859, -30.151515151515152],
            [-9.509202453987726, -30.90909090909091],
            [-5.981595092024541, -31.060606060606062],
            [-3.067484662576689, -29.393939393939394],
            [-1.380368098159508, -27.272727272727273],
            [0, -24.848484848484848],
            [1.0736196319018418, -21.666666666666668],
            [2.760736196319016, -18.78787878787879],
            [4.141104294478531, -15.909090909090908],
            [6.74846625766871, -13.484848484848484],
            [9.969325153374236, -11.818181818181818],
            [13.190184049079754, -11.363636363636363],
            [16.257668711656436, -9.242424242424242],
            [19.785276073619627, -9.696969696969697],
            [23.00613496932516, -10.303030303030303],
            [26.380368098159508, -9.242424242424242],
            [29.447852760736197, -7.272727272727273],
            [32.515337423312886, -6.363636363636363],
            [35.582822085889575, -5.303030303030301],
            [38.650306748466264, -5.151515151515152],
            [41.25766871165645, -4.3939393939393945],
            [44.018404907975466, -3.787878787878789],
            [46.31901840490798, -3.333333333333332],
            [50, -3.6363636363636367],
        ],
    }

    matrix = []
    for k, v in data.items():
        x, y = np.array(v).T
        f = interp1d(x, y)
        new_x = np.linspace(-50, 50, 1000)
        new_y = f(new_x)
        matrix.append(pd.Series(index=new_x, data=new_y, name=k))
    met_rate, utci_val, utci_delta = (
        pd.concat(matrix, axis=1).unstack().reset_index().values.T
    )

    # create 2d interpolator between [MET, UTCI] and [ΔUTCI]
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        forecaster = interp2d(met_rate, utci_val, utci_delta)

    # Calculate ΔUTCI
    original_utci = collection_to_series(utci_collection)
    utci_delta = [forecaster(met, i)[0] for i in original_utci.values]

    return collection_from_series(original_utci + utci_delta)
